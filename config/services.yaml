# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'services.php'}
    - { resource: 'legacy.php' }
#    - { resource: '/etc/sites/mysite.com/parameters.yaml', ignore_errors: true }
parameters:
    admin_email: 'amine.betari@gmail.com'
    brochures_directory: '%kernel.project_dir%/public/uploads/brochures'
    tokens:
       client1: pass1
       client2: pass2
    ga_tracking: UA-xxxxx-x

   # binary content parameters (encode the contents with base64_encode())
    app.some_parameter: !!binary VGhpcyBpcyBhIEJlbGwgY2hhciAH

    # PHP constants as parameter values
#    app.some_constant: !php/const GLOBAL_CONSTANT
#    app.another_constant: !php/const App\Entity\BlogPost::MAX_ITEMS

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $adminEmail: '%admin_email%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\BarListener:
        tags:
            - { name: kernel.event_listener, event: basket.product_added, method: doSomething, priority: 999 }

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
    App\EventListener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\Services\FileUploader:
        arguments:
            $targetDirectory: '%brochures_directory%'

    App\Controller\CustomExceptionController:
        public: true
        arguments:
            $debug: '%kernel.debug%'
