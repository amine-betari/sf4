# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'services.php'}
    - { resource: 'legacy.php' }
#    - { resource: '/etc/sites/mysite.com/parameters.yaml', ignore_errors: true }
parameters:
    admin_email: 'amine.betari@gmail.com'
    brochures_directory: '%kernel.project_dir%/public/uploads/brochures'
    tokens:
       client1: pass1
       client2: pass2
    ga_tracking: UA-xxxxx-x

   # binary content parameters (encode the contents with base64_encode())
    app.some_parameter: !!binary VGhpcyBpcyBhIEJlbGwgY2hhciAH

    # PHP constants as parameter values
#    app.some_constant: !php/const GLOBAL_CONSTANT
#    app.another_constant: !php/const App\Entity\BlogPost::MAX_ITEMS

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $adminEmail: '%admin_email%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\BarListener:
        tags:
            - { name: kernel.event_listener, event: basket.product_added, method: doSomething, priority: 999 }

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
    App\EventListener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    App\Services\FileUploader:
        arguments:
            $targetDirectory: '%brochures_directory%'

    App\Controller\CustomExceptionController:
        public: true
        arguments:
            $debug: '%kernel.debug%'

    App\Services\MessageGenerator:
        public: false
        arguments:
            $logger1: "monolog.logger.request"
            #$logger1: "@monolog.logger.request"
# a revoir, thqt's not working
    app.message:
        alias: App\Services\MessageGenerator
        public: true
## Anonymous Services
    App\Foo:
        arguments:
            - !service
                class: App\AnonymousBar
    App\Foo2:
        factory: [ !service { class: App\FooFactory }, 'constructFoo' ]

#deprecated services
    App\Services\OldService:
        deprecated: The "%service_id%" service is deprecated since 2.8 and will be removed in 3.0.

# alias and interface

    #app.rot13.transformer:
    #    class: App\Util\Rot13Transformer

    App\Services\TwitterClient:
        # redundant thanks to _defaults, but value is overridable on each service
        autowire: true
        # If you wanted to choose the non-default service, wire it manually
        arguments:
            $transformer: '@App\Util\UppercaseTransformer'
        # ...

    #App\Util\Rot13Transformer: '@app.rot13.transformer'
    App\Util\Rot13Transformer: ~
    App\Util\UppercaseTransformer: ~
    # the ``App\Util\Rot13Transformer`` service will be injected when
    # an ``App\Util\TransformerInterface`` type-hint is detected
    App\Util\TransformerInterface: '@App\Util\Rot13Transformer'

    App\Email\NewsletterManager:
        # call the static method
        factory: ['App\Email\NewsletterManagerStaticFactory', createNewsletterManager]

    App\Repository\BaseDoctrineRepository:
        abstract:  true
        arguments: ['@doctrine.orm.entity_manager']
        calls:
            - [setLogger, ['@logger']]
#parent service
#    App\Repository\DoctrineUserRepository:
#        # extend the App\Repository\BaseDoctrineRepository service
#        parent: App\Repository\BaseDoctrineRepository
#        autowire: true
#        autoconfigure: true
#        # overrides the public setting of the parent service
#        public: false
#
#        # appends the '@app.username_checker' argument to the parent
#        # argument list
#        arguments: ['@app.username_checker']
#
#    App\Repository\DoctrinePostRepository:
#        parent: App\Repository\BaseDoctrineRepository
#        autowire: true
#        autoconfigure: true
#
#        # overrides the first argument (using the special index_N key)
#        arguments:
#            index_0: '@doctrine.custom_entity_manager'

#decorate service
    App\Mailer: ~

    # this replaces the old App\Mailer definition with the new one, the
    # old definition is lost
#    App\Mailer:
#        class: App\DecoratingMailer

    App\DecoratingMailer:
        # overrides the App\Mailer service
        # but that service is still available as App\DecoratingMailer.inner
        decorates: App\Mailer

        # pass the old service as an argument
        arguments: ['@App\DecoratingMailer.inner']

        # private, because usually you do not need to fetch App\DecoratingMailer directly
        public:    false

#tags
#    Swift_SmtpTransport:
#        arguments: ['%mailer_host%']
#        tags: ['app.mail_transport']
#        tags:
#            - { name: 'app.mail_transport', alias: 'smtp' }

#    Swift_SendmailTransport:
#        tags: ['app.mail_transport']
#        tags:
#            - { name: 'app.mail_transport', alias: 'sendmail' }
